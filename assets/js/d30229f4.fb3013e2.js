"use strict";(self.webpackChunkcmjeon_github_io=self.webpackChunkcmjeon_github_io||[]).push([[138],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),p=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},i=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,i=u(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,g=d["".concat(o,".").concat(m)]||d[m]||c[m]||l;return r?n.createElement(g,s(s({ref:t},i),{},{components:r})):n.createElement(g,s({ref:t},i))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,s=new Array(l);s[0]=d;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:a,s[1]=u;for(var p=2;p<l;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8173:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const l={date:new Date("2022-12-05T00:00:00.000Z"),title:"2022\ub144 12\uc6d4 5\uc77c",authors:["cmjeon"],tags:["\ud1a0\ube44\uc758\uc2a4\ud504\ub9c1"]},s=void 0,u={permalink:"/blog-docusaurus-002/blog/2022/12/05/",source:"@site/blog/2022-12-05.md",title:"2022\ub144 12\uc6d4 5\uc77c",description:"'\ud1a0\ube44\uc758\uc2a4\ud504\ub9c1'\uc758 '3\uc7a5 \ud14c\uc2a4\ud2b8'",date:"2022-12-05T00:00:00.000Z",formattedDate:"2022\ub144 12\uc6d4 5\uc77c",tags:[{label:"\ud1a0\ube44\uc758\uc2a4\ud504\ub9c1",permalink:"/blog-docusaurus-002/blog/tags/\ud1a0\ube44\uc758\uc2a4\ud504\ub9c1"}],readingTime:6.865,hasTruncateMarker:!0,authors:[{name:"cm jeon",key:"cmjeon"}],frontMatter:{date:"2022-12-05T00:00:00.000Z",title:"2022\ub144 12\uc6d4 5\uc77c",authors:["cmjeon"],tags:["\ud1a0\ube44\uc758\uc2a4\ud504\ub9c1"]},prevItem:{title:"2022\ub144 12\uc6d4 6\uc77c",permalink:"/blog-docusaurus-002/blog/2022/12/06/"},nextItem:{title:"2022\ub144 12\uc6d4 4\uc77c",permalink:"/blog-docusaurus-002/blog/2022/12/04/"}},o={authorsImageUrls:[void 0]},p=[{value:"3.6 \uc2a4\ud504\ub9c1\uc758 JdbcTemplate",id:"36-\uc2a4\ud504\ub9c1\uc758-jdbctemplate",level:2},{value:"3.6.1 update()",id:"361-update",level:3},{value:"3.6.2 queryForInt()",id:"362-queryforint",level:3},{value:"3.6.3 queryForObject()",id:"363-queryforobject",level:3},{value:"3.6.4 query()",id:"364-query",level:3},{value:"3.6.5 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucf5c\ubc31\uc758 \ubd84\ub9ac",id:"365-\uc7ac\uc0ac\uc6a9-\uac00\ub2a5\ud55c-\ucf5c\ubc31\uc758-\ubd84\ub9ac",level:3},{value:"DI \ub97c \uc704\ud55c \ucf54\ub4dc \uc815\ub9ac",id:"di-\ub97c-\uc704\ud55c-\ucf54\ub4dc-\uc815\ub9ac",level:4},{value:"\uc911\ubcf5 \uc81c\uac70",id:"\uc911\ubcf5-\uc81c\uac70",level:4},{value:"\ud15c\ud50c\ub9bf/\ucf5c\ubc31 \ud328\ud134\uacfc UserDao",id:"\ud15c\ud50c\ub9bf\ucf5c\ubc31-\ud328\ud134\uacfc-userdao",level:4}],i={toc:p};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"'\ud1a0\ube44\uc758\uc2a4\ud504\ub9c1'\uc758 '3\uc7a5 \ud14c\uc2a4\ud2b8'")),(0,a.kt)("h2",{id:"36-\uc2a4\ud504\ub9c1\uc758-jdbctemplate"},"3.6 \uc2a4\ud504\ub9c1\uc758 JdbcTemplate"),(0,a.kt)("p",null,"\uc2a4\ud504\ub9c1\uc758 \ud15c\ud50c\ub9bf/\ucf5c\ubc31 \uae30\uc220\uc744 \uc0b4\ud3b4\ubcf4\uc790."),(0,a.kt)("p",null,"\uc2a4\ud504\ub9c1\uc774 \uc81c\uacf5\ud558\ub294 JDBC \ucf54\ub4dc\uc6a9 \uae30\ubcf8 \ud15c\ud50c\ub9bf\uc740 JdbcTemplate \uc774\ub2e4."),(0,a.kt)("p",null,"UserDao \uac00 JdbcTemplate \uc744 \ubc1b\uc744 \uc218 \uc788\ub3c4\ub85d \ubcc0\uacbd\ud55c\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="UserDao.java"',title:'"UserDao.java"'},"public class UserDao {\n    \n    // ...\n    \n    // highlight-next-line\n    private JdbcTemplate jdbcTemplate;\n    \n    public void setDataSource(DataSource dataSource) {\n        // highlight-next-line\n        this.jdbcTemplate = new JdbcTemplate(dataSource);\n        this.dataSource = dataSource;\n    }\n    \n    // ...\n    \n}\n")),(0,a.kt)("h3",{id:"361-update"},"3.6.1 update()"),(0,a.kt)("p",null,"deleteAll() \uba54\uc18c\ub4dc\ub97c \ubcc0\uacbd\ud55c\ub2e4."),(0,a.kt)("p",null,"makePreparedStatement() \ub97c createPreparedStatement() \uba54\uc18c\ub4dc\ub85c \ubcc0\uacbd\ud55c\ub2e4."),(0,a.kt)("p",null,"\uc774\ub294 \ub458\ub2e4 \ud15c\ud50c\ub9bf\uc73c\ub85c\ubd80\ud130 Connection \uc744 \uc81c\uacf5\ubc1b\uc544\uc11c PreparedStatement \ub97c \ub3cc\ub824\uc900\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public void deleteAll() {\n    this.jdbcTemplate.update(\n        new PreparedStatementCreator() {\n            public PreparedStatement createPreparedStatement(Connection con) throws SQLException {\n                return con.prepareStatement("delete from users");\n            }\n        }\n    );\n}\n')),(0,a.kt)("p",null,"JdbcTemplate \uc758 \ub0b4\uc7a5 \ucf5c\ubc31\uc744 \uc0ac\uc6a9\ud558\ub294 update() \uba54\uc18c\ub4dc\ub85c \ubcc0\uacbd\ud558\uc600\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public void deleteAll() {\n    this.jdbcTemplate.update("delete from users");\n}\n')),(0,a.kt)("p",null,"add() \uba54\uc18c\ub4dc\uc758 \ucf5c\ubc31\uc5d0\uc11c \uc218\ud589\ud558\ub294 PreparedStatement \ub97c \ub9cc\ub4e4\uace0, \ud30c\ub77c\ubbf8\ud130\ub97c \ubc14\uc778\ub529\ud558\ub294 \uc791\uc5c5\ub3c4 update() \uba54\uc18c\ub4dc\ub85c \uac00\ub2a5\ud558\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public void add() {\n    this.jdbcTemplate.update("insert into users(id, name, password) values(?, ?, ?)", \n            user.getId(), \n            user.getName(),\n            user.getPassword()\n    );\n}\n')),(0,a.kt)("h3",{id:"362-queryforint"},"3.6.2 queryForInt()"),(0,a.kt)("p",null,"getCount() \uba54\uc18c\ub4dc\uc5d0 JdbcTemplate \uc758 query() \uba54\uc18c\ub4dc\ub97c \uc801\uc6a9\ud55c\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public int getCount() {\n    return this.jdbcTemplate.query(\n            new PreparedStatementCreator() {\n                public PreparedStatement createPreparedStatement(Connection con) throws SQLException {\n                    return con.prepareStatement("select count(*) from users");\n                }\n            },\n            new ResultSetExtractor<Integer>() {\n                public Integer extractData(ResultSet rs) throws SQLException, DataAccessException {\n                    rs.next();\n                    return rs.getInt(1);\n                }\n            }\n    );\n}\n')),(0,a.kt)("p",null,"2\uac1c\uc758 \ucf5c\ubc31\uc774 \uc788\uc5b4 \ud63c\ub780\uc2a4\ub7fd\ub2e4."),(0,a.kt)("p",null,"\uc6d0\ub798 getCount() \uba54\uc18c\ub4dc\uc5d0 \uc788\ub358 \ucf54\ub4dc \uc911\uc5d0\uc11c \ubcc0\ud558\ub294 \ubd80\ubd84\ub9cc \ucf5c\ubc31\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc838\uc11c \uc81c\uacf5\ub41c\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4."),(0,a.kt)("p",null,"\ud074\ub77c\uc774\uc5b8\ud2b8 -> \ud15c\ud50c\ub9bf -> \ucf5c\ubc31\uc758 \uad00\uacc4\ub97c \uae30\uc5b5\ud558\uc790."),(0,a.kt)("p",null,"\ub450 \ubc88\uc9f8 \ucf5c\ubc31\uc740 Generic \uc744 \uc0ac\uc6a9\ud558\uc600\ub2e4."),(0,a.kt)("p",null,"\uc774\ub97c \ud1b5\ud574 query() \ud15c\ud50c\ub9bf\uc758 \ub9ac\ud134 \ud0c0\uc785\ub3c4 \ubc14\ub00c\uac8c \ub41c\ub2e4."),(0,a.kt)("p",null,"\uc704 \ub450 \uac1c\uc758 \ucf5c\ubc31\uc744 \ub0b4\uc7a5\ud558\uace0 \uc788\ub294 query() \ud15c\ud50c\ub9bf\uc744 JdbcTemplate \uc758 queryForInt() \ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public int getCount () {\n    return this.jdbcTemplate.queryForInt("select count(*) from users");\n}\n')),(0,a.kt)("h3",{id:"363-queryforobject"},"3.6.3 queryForObject()"),(0,a.kt)("p",null,"get() \uba54\uc18c\ub4dc\uc5d0\ub3c4 JdbcTemplate \uc744 \uc801\uc6a9\ud574\ubcf4\uc790."),(0,a.kt)("p",null,"get() \uba54\uc18c\ub4dc\uc5d0\ub294 \ubc14\uc778\ub529\uc774 \ud544\uc694\ud55c \uce58\ud658\uc790\uac00 \uc788\ub2e4."),(0,a.kt)("p",null,"\uadf8\ub9ac\uace0 ResultSet \uc774 User \uac1d\uccb4\ub85c \ub9ac\ud134\ub418\uc5b4\uc57c \ud55c\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public User get(String id) {\n    return this.jdbcTemplate.queryForObject(\n            "select * from users where id = ?",\n            new Object[] {id},\n            new RowMapper<User>() {\n                public User mapRow(ResultSet rs, int rowNum) throws SQLException {\n                    User user = new User();\n                    user.setId(rs.getString("id"));\n                    user.setName(rs.getString("name"));\n                    user.setPassword(rs.getString("password"));\n                    return user;\n                }\n            }\n    );\n}\n')),(0,a.kt)("p",null,"\uccab \ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\ub294 PreparedStatement \ub97c \ub9cc\ub4e4\uae30 \uc704\ud55c SQL, \ub450 \ubc88\uc9f8\ub294 \ubc14\uc778\ub529\ud560 \uac12\uc774\ub2e4."),(0,a.kt)("p",null,"queryForObject() \uba54\uc18c\ub4dc \ub0b4\ubd80\uc5d0\uc11c \uc774 \ub450 \ud30c\ub77c\ubbf8\ud130\ub97c \uc0ac\uc6a9\ud558\ub294 PreparedStatement \ucf5c\ubc31\uc774 \ub9cc\ub4e4\uc5b4\uc9c4\ub2e4."),(0,a.kt)("p",null,"RowMapper \uc5d0\uc11c\ub294 ResultSet \uc758 \ub85c\uc6b0 \ub0b4\uc6a9\uc744 User \uc624\ube0c\uc81d\ud2b8\uc5d0 \ub2f4\uc544\uc11c \ub9ac\ud134\ud55c\ub2e4."),(0,a.kt)("p",null,"\ub9cc\uc57d queryForObject() \uba54\uc18c\ub4dc\uc758 \uc2e4\ud589\uacb0\uacfc\uac00 \ube44\uc5b4\uc788\ub2e4\uba74 EmptyResultDataAccessException \uc608\uc678\ub97c \ub358\uc9c0\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\uc838 \uc788\ub2e4. "),(0,a.kt)("h3",{id:"364-query"},"3.6.4 query()"),(0,a.kt)("p",null,"getAll() \uba54\uc18c\ub4dc\ub97c \ucd94\uac00\ud574\uc11c \uc0ac\uc6a9\uc790 \ubaa9\ub85d\uc744 \uac00\uc838\uc62c \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4."),(0,a.kt)("p",null,"\uba3c\uc800 \ud14c\uc2a4\ud2b8\ub97c \ub9cc\ub4e0\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="UserDaoTest.java"',title:'"UserDaoTest.java"'},"// ...\npublic class UserDaoTest {\n\n  // ...\n  \n  @Test\n    public void getAll()  {\n        dao.deleteAll();\n        \n        List<User> users0 = dao.getAll();\n        assertThat(users0.size(), is(0));\n        \n        dao.add(user1); // Id: gyumee\n        List<User> users1 = dao.getAll();\n        assertThat(users1.size(), is(1));\n        checkSameUser(user1, users1.get(0));\n        \n        dao.add(user2); // Id: leegw700\n        List<User> users2 = dao.getAll();\n        assertThat(users2.size(), is(2));\n        checkSameUser(user1, users2.get(0));  \n        checkSameUser(user2, users2.get(1));\n        \n        dao.add(user3); // Id: bumjin\n        List<User> users3 = dao.getAll();\n        assertThat(users3.size(), is(3));\n        checkSameUser(user3, users3.get(0));  \n        checkSameUser(user1, users3.get(1));  \n        checkSameUser(user2, users3.get(2));  \n    }\n    \n}\n")),(0,a.kt)("p",null,"getAll() \uba54\uc18c\ub4dc\ub97c \ub9cc\ub4e0\ub2e4."),(0,a.kt)("p",null,"get() \uba54\uc18c\ub4dc\uc640 \ub2e4\ub978 \uc810\uc740 JdbcTemplate \uc758 query() \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uac83\uc774\ub2e4."),(0,a.kt)("p",null,"query() \uc758 \ub9ac\ud134 \ud0c0\uc785\uc740 ",(0,a.kt)("inlineCode",{parentName:"p"},"List<T>")," \uc774\ubbc0\ub85c ",(0,a.kt)("inlineCode",{parentName:"p"},"RowMapper<T>")," \ucf5c\ubc31 \uc624\ube0c\uc81d\ud2b8\uc5d0\uc11c \uacb0\uc815\ud560 \uc218 \uc788\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="User.java"',title:'"User.java"'},'public List<User> getAll() {\n  return this.jdbcTemplate.query(\n    "select * from users order by id",\n    new RowMapper<User>() {\n      public User mapRow(ResultSet rs, int rowNum) throws SQLException {\n        User user = new User();\n        user.setId(rs.getString("id"));\n        user.setName(rs.getString("name"));\n        user.setPassword(rs.getString("password"));\n        return user;\n      }\n    }\n  );\n}\n')),(0,a.kt)("p",null,"\ud604\uba85\ud55c \uac1c\ubc1c\uc790\uac00 \ub418\ub824\uba74 \ub124\uac70\ud2f0\ube0c \ud14c\uc2a4\ud2b8\uc5d0 \uc775\uc219\ud574\uc9c0\ub294 \uac83\uc774 \uc88b\ub2e4."),(0,a.kt)("p",null,"\ud14c\uc2a4\ud2b8\uc5d0 \ub370\uc774\ud130\uac00 \uc5c6\ub294 \uacbd\uc6b0\uc5d0 \ub300\ud55c \uac80\uc99d \ucf54\ub4dc\ub97c \ucd94\uac00\ud55c\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="UserDaoTest.java"',title:'"UserDaoTest.java"'},"// ...\n\npublic class UserDaoTest {\n\n  // ...\n  \n  @Test\n    public void getAll()  {\n        dao.deleteAll();\n        \n        // ...\n        \n        // highlight-start\n        List<User> users0 = dao.getAll();\n        assertThat(users0.size(), is(0));\n        // highlight-end\n        \n    }\n    \n}\n")),(0,a.kt)("h3",{id:"365-\uc7ac\uc0ac\uc6a9-\uac00\ub2a5\ud55c-\ucf5c\ubc31\uc758-\ubd84\ub9ac"},"3.6.5 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucf5c\ubc31\uc758 \ubd84\ub9ac"),(0,a.kt)("h4",{id:"di-\ub97c-\uc704\ud55c-\ucf54\ub4dc-\uc815\ub9ac"},"DI \ub97c \uc704\ud55c \ucf54\ub4dc \uc815\ub9ac"),(0,a.kt)("p",null,"JdbcTemplate \ub97c \uc0ac\uc6a9\ud558\uba74 dataSource \uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uc73c\ub2c8 DataSource \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218\ub97c \uc81c\uac70\ud55c\ub2e4."),(0,a.kt)("p",null,"JdbcTemplate \uc744 \uc0dd\uc131\ud560 \ub54c \uc9c1\uc811 DI \ud574\uc8fc\uae30 \uc704\ud574 setter \uba54\uc18c\ub4dc\ub294 \ub0a8\uaca8\ub454\ub2e4."),(0,a.kt)("h4",{id:"\uc911\ubcf5-\uc81c\uac70"},"\uc911\ubcf5 \uc81c\uac70"),(0,a.kt)("p",null,"get(), getAll() \uba54\uc18c\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 RowMapper \ub97c \uc7ac\uc0ac\uc6a9\uac00\ub2a5\ud558\ub3c4\ub85d \ubd84\ub9ac\ud55c\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="UserDao.java"',title:'"UserDao.java"'},'// ...\n\npublic class UserDao {\n\n  // ...\n  \n  private RowMapper<User> userMapper = new RowMapper<User>() {\n    public User mapRow(ResultSet rs, int rowNum) throws SQLException {\n      User user = new User();\n      user.setId(rs.getString("id"));\n      user.setName(rs.getString("name"));\n      user.setPassword(rs.getString("password"));\n      return user;\n    }\n  };\n  \n  public User get(String id) {\n        return this.jdbcTemplate.queryForObject(\n          "select * from users where id = ?",\n            new Object[] {id},\n            // highlight-next-line \n            this.userMapper\n    );\n    } \n    \n    public List<User> getAll() {\n        return this.jdbcTemplate.query(\n          "select * from users order by id",\n          // highlight-next-line\n          this.userMapper\n    );\n    }\n}\n')),(0,a.kt)("h4",{id:"\ud15c\ud50c\ub9bf\ucf5c\ubc31-\ud328\ud134\uacfc-userdao"},"\ud15c\ud50c\ub9bf/\ucf5c\ubc31 \ud328\ud134\uacfc UserDao"),(0,a.kt)("p",null,"UserDao \uc5d0\ub294 User \uc815\ubcf4\ub97c DB \uc5d0 \ub123\uac70\ub098 \uac00\uc838\uc624\uac70\ub098 \uc870\uc791\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud55c \ud575\uc2ec\uc801\uc778 \ub85c\uc9c1\ub9cc \ub2f4\uaca8 \uc788\ub2e4."),(0,a.kt)("p",null,"JdbcTemplate \uc5d0\ub294 JDBC API \ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\uc2dd, \uc608\uc678\ucc98\ub9ac, \ub9ac\uc18c\uc2a4\uc758 \ubc18\ub0a9, DB \uc5f0\uacb0\uacfc \uad00\ub828\ub41c \ucc45\uc784\uacfc \uad00\uc2ec\uc744 \ub2f4\uace0 \uc788\ub2e4."),(0,a.kt)("p",null,"UserDao \ub294 \ub2e4\ub978 \ucf54\ub4dc\uc640 \ub0ae\uc740 \uacb0\ud569\ub3c4\ub97c \uc720\uc9c0\ud558\uace0 \uc788\ub2e4."),(0,a.kt)("p",null,"JdbcTemplate \ub97c \uc9c1\uc811 \uc774\uc6a9\ud55c\ub2e4\ub294 \uce21\uba74\uc5d0\uc11c \ud2b9\uc815 \ud15c\ud50c\ub9bf/\ucf5c\ubc31 \uad6c\ud604\uc5d0 \uac15\ud55c \uacb0\ud569\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4."),(0,a.kt)("p",null,"\ub9cc\uc57d \ub354 \ub0ae\uc740 \uacb0\ud569\uc744 \uc720\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 DI \ubc1b\uc544 \uc0ac\uc6a9\ud558\uac8c \ub9cc\ub4e4\uc5b4\ub3c4 \ub41c\ub2e4."),(0,a.kt)("p",null,"\uc774 \uc678\uc5d0\ub3c4 userMapper \ub97c \ubcc4\ub3c4\uc758 \ube48\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ubc84\ub9ac\ub294 \ubc29\ubc95, SQL \ubb38\uc7a5\uc744 UserDao \ucf54\ub4dc\uac00 \uc544\ub2cc \uc678\ubd80 \ub9ac\uc18c\uc2a4\uc5d0 \ub2f4\uace0 \uc774\ub97c \uc77d\uc5b4\uc640 \uc0ac\uc6a9\ud558\uac8c \ud558\ub294 \ubc29\ubc95\uc774 \uc788\uaca0\ub2e4."))}c.isMDXComponent=!0}}]);